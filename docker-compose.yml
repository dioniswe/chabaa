version: '3'
services:
  #-TODO jitsi
  #jitsi is coming with its own dedicated docker-compose file making available all services needed for video conferencing
  #video-call:
  #image: jitsi

  chabaa:
    image: chabaa
    container_name: chabaa
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
      args:
        - USER_ID
        - GROUP_ID
    volumes:
      - .:/var/www/chabaa
      - ./docker/php/php-fpm.conf:/usr/local/etc/php-fpm.conf
      - ./docker/php/php.ini-production:/usr/local/etc/php/php.ini
      - ./storage/logs/php:/var/log/php/
    environment:
      CONTAINER_ROLE: chabaa
    restart: unless-stopped
    networks:
      - mynet

  web:
    container_name: web
    image: nginx:1.17
    depends_on:
      - chabaa
    volumes:
      - .:/var/www/chabaa
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
      - ./docker/nginx/ssl/:/etc/nginx/ssl/
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./storage/logs/nginx:/var/log/nginx/
    ports:
      - 80:80
      - 443:443
    restart: on-failure
    networks:
      - mynet

  database:
    container_name: database
    image: mariadb:10.5
    volumes:
      - ./storage/data/mysql:/var/lib/mysql
      - ./storage/logs/mysql:/var/log/mysql/
      - ./docker/mariadb/etc/my.cnf:/etc/mysql/my.cnf
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      - mynet

  redis:
    container_name: redis
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    volumes:
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - mynet

  # queue set up according to https://laravel-news.com/laravel-scheduler-queue-docker
  queue:
    image: chabaa
    container_name: queue
    depends_on:
      - chabaa
      - redis
    volumes:
      - .:/var/www/chabaa
    restart: on-failure
    environment:
      APP_ENV: local
      CONTAINER_ROLE: queue
    working_dir: /var/www/chabaa
    networks:
      - mynet

  sftp:
    container_name: sftp
    image: atmoz/sftp
    volumes:
      - ./storage/data/sftp:/home/foo/upload
    # TODO consider bind mount instead of hosting in docker container
    environment:
      - SFTP_USERS=${SFTP_USER}:${SFTP_PASSWORD}:::upload
    networks:
      - mynet

  icecast:
    container_name: icecast
    build:
      context: .
      dockerfile: docker/icecast/Dockerfile
    working_dir: /var/www/chabaa
    command: /opt/start_modified.sh
    volumes:
      #- ./storage/logs/icecast:/var/log/icecast2
      - ./docker/icecast/start_modified.sh/:/opt/start_modified.sh:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - ICECAST_SOURCE_PASSWORD=${ICECAST_SOURCE_PASSWORD}
      - ICECAST_ADMIN_PASSWORD=${ICECAST_ADMIN_PASSWORD}
      - ICECAST_RELAY_PASSWORD=${ICECAST_RELAY_PASSWORD}
      - ICECAST_PASSWORD=${ICECAST_MOUNT_PASSWORD}
      - ICECAST_PORT=${ICECAST_PORT}
    ports:
    # TODO set icecast port correctly through environment variable into config
      - 8080:8080
    networks:
      - mynet

  websocket:
    container_name: websocket
    image: mintopia/laravel-echo-server
    #build: ./docker/echo
    #working_dir: /usr/src/app
    #volumes:
     # - "./:/usr/src/app"
    #  - ./laravel-echo-server.json:/app/laravel-echo-server.json
    ports:
      - 6001:6001
    networks:
      - mynet

  streaming-server:
    build:
      context: .
      dockerfile: ./docker/streaming-server/Dockerfile
    container_name: streaming-server
    volumes:
      - ./docker/streaming-server/app.js:/usr/src/app/app.js
    ports:
      # TODO set streaming server port correctly through environment variable into config
      - 8000:8000
      - 1935:1935
    networks:
      - mynet

# reverse proxy not in use yet
  #reverse-proxy:
   # container_name: reverse-proxy
    #image: traefik:latest
    #networks:
     # - mynet

networks:
  mynet:
